local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/luvhibob1/library/main/deadcell/source.lua"))()

    -- themes
    local ui_themes = {
        ["Default"] = {
            ["Accent"] = Color3.fromRGB(255,82,82),
            ["Window Outline Background"] = Color3.fromRGB(15,17,19),
            ["Window Inline Background"] = Color3.fromRGB(17,19,23),
            ["Window Holder Background"] = Color3.fromRGB(17,19,23),
            ["Page Unselected"] = Color3.fromRGB(17,19,23),
            ["Page Selected"] = Color3.fromRGB(17,19,23),
            ["Section Background"] = Color3.fromRGB(15,17,19),
            ["Section Inner Border"] = Color3.fromRGB(17,19,23),
            ["Section Outer Border"] = Color3.fromRGB(31,29,29),
            ["Window Border"] = Color3.fromRGB(31,29,29),
            ["Text"] = Color3.fromRGB(192, 192, 192),
            ["Risky Text"] = Color3.fromRGB(204, 6, 6),
            ["Object Background"] = Color3.fromRGB(15,17,19)
        };
        ["Aimware"] = {
            ["Accent"] = Color3.fromRGB(240, 72, 78),
            ["Window Outline Background"] = Color3.fromRGB(19,19,19),
            ["Window Inline Background"] = Color3.fromRGB(31,31,31),
            ["Window Holder Background"] = Color3.fromRGB(31,31,31),
            ["Page Unselected"] = Color3.fromRGB(17,19,23),
            ["Page Selected"] = Color3.fromRGB(31,31,31),
            ["Section Background"] = Color3.fromRGB(24,24,24),
            ["Section Inner Border"] = Color3.fromRGB(52,51,55),
            ["Section Outer Border"] = Color3.fromRGB(0,0,0),
            ["Window Border"] = Color3.fromRGB(50,50,50),
            ["Text"] = Color3.fromRGB(255,255,255),
            ["Risky Text"] = Color3.fromRGB(204, 6, 6),
            ["Object Background"] = Color3.fromRGB(31,31,31)
        };
        ["Dark Blue"] = {
            ["Accent"] = Color3.fromRGB(82, 157, 255),
            ["Window Outline Background"] = Color3.fromRGB(15,17,19),
            ["Window Inline Background"] = Color3.fromRGB(23,23,30),
            ["Window Holder Background"] = Color3.fromRGB(17,19,23),
            ["Page Unselected"] = Color3.fromRGB(17,19,23),
            ["Page Selected"] = Color3.fromRGB(17,19,23),
            ["Section Background"] = Color3.fromRGB(15,17,19),
            ["Section Inner Border"] = Color3.fromRGB(17,19,23),
            ["Section Outer Border"] = Color3.fromRGB(31,29,29),
            ["Window Border"] = Color3.fromRGB(31,29,29),
            ["Text"] = Color3.fromRGB(192, 192, 192),
            ["Risky Text"] = Color3.fromRGB(204, 6, 6),
            ["Object Background"] = Color3.fromRGB(15,17,19)
        };
        ["Interwebz"] = {
            ["Accent"] = Color3.fromRGB(247, 123, 101),
            ["Window Outline Background"] = Color3.fromRGB(25,18,34),
            ["Window Inline Background"] = Color3.fromRGB(25,18,34),
            ["Window Holder Background"] = Color3.fromRGB(32,25,43),
            ["Page Unselected"] = Color3.fromRGB(32,25,43),
            ["Page Selected"] = Color3.fromRGB(32,25,43),
            ["Section Background"] = Color3.fromRGB(25,18,34),
            ["Section Inner Border"] = Color3.fromRGB(48,42,57),
            ["Section Outer Border"] = Color3.fromRGB(26,20,36),
            ["Window Border"] = Color3.fromRGB(48,42,57),
            ["Text"] = Color3.fromRGB(245, 245, 245),
            ["Risky Text"] = Color3.fromRGB(245, 239, 120),
            ["Object Background"] = Color3.fromRGB(32,25,43)
        };
        ["Nebula"] = {
            ["Accent"] = Color3.fromRGB(97,55,206),
            ["Window Outline Background"] = Color3.fromRGB(32,32,32),
            ["Window Inline Background"] = Color3.fromRGB(19,19,19),
            ["Window Holder Background"] = Color3.fromRGB(15,15,15),
            ["Page Unselected"] = Color3.fromRGB(36,36,36),
            ["Page Selected"] = Color3.fromRGB(26,26,26),
            ["Section Background"] = Color3.fromRGB(22,22,22),
            ["Section Inner Border"] = Color3.fromRGB(0,0,0),
            ["Section Outer Border"] = Color3.fromRGB(37,37,37),
            ["Window Border"] = Color3.fromRGB(51,51,51),
            ["Text"] = Color3.fromRGB(223,223,223),
            ["Risky Text"] = Color3.fromRGB(245, 239, 120),
            ["Object Background"] = Color3.fromRGB(24,24,24)
        };
        ["BBOT"] = {
            ["Accent"] = Color3.fromRGB(103,68,211),
            ["Window Outline Background"] = Color3.fromRGB(103,68,211),
            ["Window Inline Background"] = Color3.fromRGB(26,26,26),
            ["Window Holder Background"] = Color3.fromRGB(29,29,29),
            ["Page Unselected"] = Color3.fromRGB(43,43,43),
            ["Page Selected"] = Color3.fromRGB(36,36,36),
            ["Section Background"] = Color3.fromRGB(27,27,27),
            ["Section Inner Border"] = Color3.fromRGB(0,0,0),
            ["Section Outer Border"] = Color3.fromRGB(48,48,48),
            ["Window Border"] = Color3.fromRGB(63,63,63),
            ["Text"] = Color3.fromRGB(223,223,223),
            ["Risky Text"] = Color3.fromRGB(245, 239, 120),
            ["Object Background"] = Color3.fromRGB(48,48,48)
        };   
        ["Old Theme"] = {
            ["Accent"] = Color3.fromRGB(61, 100, 227),
            ["Window Outline Background"] = Color3.fromRGB(39,39,47),
            ["Window Inline Background"] = Color3.fromRGB(23,23,30),
            ["Window Holder Background"] = Color3.fromRGB(32,32,38),
            ["Page Unselected"] = Color3.fromRGB(32,32,38),
            ["Page Selected"] = Color3.fromRGB(55,55,64),
            ["Section Background"] = Color3.fromRGB(27,27,34),
            ["Section Inner Border"] = Color3.fromRGB(50,50,58),
            ["Section Outer Border"] = Color3.fromRGB(19,19,27),
            ["Window Border"] = Color3.fromRGB(58,58,67),
            ["Text"] = Color3.fromRGB(245, 245, 245),
            ["Risky Text"] = Color3.fromRGB(245, 239, 120),
            ["Object Background"] = Color3.fromRGB(41,41,50)
        };
    }
    --
    library:SetTheme(ui_themes["Default"])
    --
    local default_theme = ui_themes["Default"]
    --
    local window = library:new_window({size = Vector2.new(610,735)});
    -- pages
    local combat = window:new_page({name = "combat"});
    combat:open(); -- troll
    local visuals = window:new_page({name = "visuals"});
    local misc = window:new_page({name = "misc"});
    local config = window:new_page({name = "config"});
    local menu = window:new_page({name = "menu"})
    -- combat
    do
        local combat_main = combat:new_section_holder({name = "aim assist", size = "Fill"}) do
            local combat_assist = combat_main:new_section({name = 'main'}) do
                combat_assist:open()
                combat_assist:new_toggle({name = "enable", flag = 'combat_assist'})
                combat_assist:new_keybind({name = "activation key", keybind_name = "aim assist", flag = 'combat_assist_key', mode = "Hold", default = Enum.UserInputType.MouseButton2})
                combat_assist:new_slider({name = "field of view (Â°)", flag = 'combat_assist_fov', min = 0, max = 1000, default = 500})
                combat_assist:new_slider({name = "horizontal smoothing", flag = 'combat_assist_x', min = 0, max = 10, default = 1, float = 0.1})
                combat_assist:new_slider({name = "vertical smoothing", flag = 'combat_assist_y', min = 0, max = 10, default = 1, float = 0.1})
                combat_assist:new_dropdown({name = "hitpart", flag = 'combat_assist_hitbox', options = {'Head','Chest'}, default = 'Head'})
                combat_assist:new_seperator({name = "misc"})
                combat_assist:new_toggle({name = "render field of view", flag = 'combat_assist_fov_render'}):new_colorpicker({flag = 'combat_assist_fov_color', default = Color3.fromRGB(255,0,0)})
                combat_assist:new_toggle({name = "enable mouse offset", flag = 'combat_offset'})
                combat_assist:new_slider({name = "offset x", flag = 'combat_offset_x', min = 0, max = 100})
                combat_assist:new_slider({name = "offset y", flag = 'combat_offset_y', min = 0, max = 100})
            end;
            local combat_target = combat_main:new_section({name = "targeting"}) do
                combat_target:new_dropdown({name = "checks", flag = 'combat_target_checks', options = {"Team","Visible","Invisible","Friendly","Whitelisted"}, max = 5})
            end;
        end;
        local combat_mods = combat:new_section({name = "modifications", side = "right", size = 140}) do
            combat_mods:new_toggle({name = "recoil compensation", flag = 'mods_recoil'})
            combat_mods:new_slider({name = "recoil amount (%)", flag = 'mods_recoil_value', min = 0, max = 100, default = 100, float = 1})
            combat_mods:new_toggle({name = "compensate spread", flag = 'mods_spread'})
            combat_mods:new_toggle({name = "compensate bullet drop", flag = 'mods_drop'})
            combat_mods:new_toggle({name = "compensate gun bobbing", flag = 'mods_bob'})
            combat_mods:new_toggle({name = "compensate camera shake", flag = 'mods_shake'})
            combat_mods:new_toggle({name = "wallbang", flag = 'mods_wallbang', risky = true})
        end;
        local combat_hitsounds = combat:new_section_holder({name = "hitsounds", side = "right", size = 175}) do
            local hitsounds_hitmarker = combat_hitsounds:new_section({name = "hitmarker"}) do
                hitsounds_hitmarker:open();
                hitsounds_hitmarker:new_toggle({name = "override sound", flag = 'hitmarker_toggle'})
                hitsounds_hitmarker:new_dropdown({name = "custom sound", flag = 'hitmarker_sound', options = {}})
                hitsounds_hitmarker:new_slider({name = "volume", flag = 'hitmarker_sound', min = 0, max = 10, default = 3.5, float = 0.1})
                hitsounds_hitmarker:new_slider({name = "pitch", flag = 'hitmarker_pitch', min = 0, max = 10, default = 1, float = 0.1})
            end;
            local hitsounds_headshot = combat_hitsounds:new_section({name = "headshot"})
            local hitsounds_kill = combat_hitsounds:new_section({name = "kill"})
        end;
    end;
    -- visuals
    do
        local visuals_players = visuals:new_section_holder({name = "player esp", size = "Fill"}) do
            local players_general = visuals_players:new_section({name = "general"}) do
                players_general:new_toggle({name = "enable esp", flag = 'esp_enabled'});
                players_general:new_slider({name = "render distance", max = 1000, min = 0, default = 500, flag = 'esp_render_distance', float = 1});
                players_general:new_toggle({name = "bounding box", flag = 'esp_box'}):new_colorpicker({flag = 'esp_box_color', default = Color3.fromRGB(255,255,255)});
                players_general:new_toggle({name = "name", flag = 'esp_name'}):new_colorpicker({flag = 'esp_name_color', default = Color3.fromRGB(255,255,255)});
                players_general:new_toggle({name = "weapon", flag = 'esp_weapon'}):new_colorpicker({flag = 'esp_weapon_color', default = Color3.fromRGB(255,255,255)});
                players_general:new_toggle({name = "distance", flag = 'esp_distance'}):new_colorpicker({flag = 'esp_distance_color', default = Color3.fromRGB(255,255,255)});
                players_general:new_toggle({name = "health", flag = 'esp_health'}):new_colorpicker({flag = 'esp_health_color', default = Color3.fromRGB(255,255,255)});
                local healthbar = players_general:new_toggle({name = "healthbar", flag = 'esp_healthbar'}) do
                    healthbar:new_colorpicker({flag = 'esp_health_color2', default = Color3.fromRGB(255,0,0)});
                    healthbar:new_colorpicker({flag = 'esp_health_color1', default = Color3.fromRGB(0,255,0)});
                end;
                players_general:new_toggle({name = "flags", flag = 'esp_flags'});
                players_general:new_dropdown({name = "flag types", flag = 'esp_flags_types', options = {"Visible","Friendly"}, max = 2});
                local chams = players_general:new_toggle({name = "chams", flag = 'esp_chams'}) do
                    chams:new_colorpicker({flag = 'esp_chams_color2', default = Color3.fromRGB(204, 93, 255)});
                    chams:new_colorpicker({flag = 'esp_chams_color1', default = Color3.fromRGB(224, 144, 255)});
                end;
                players_general:new_toggle({name = "offscreen arrows", flag = 'esp_arrow'}):new_colorpicker({flag = 'esp_arrow_color', default = Color3.fromRGB(255,255,255)});
                players_general:new_dropdown({name = "arrow indicators", flag = 'esp_arrow_indicator', options = {"Name","Distance","Weapon","Healthbar"}, max = 4});
            end;
            players_general:open();
            --
            local players_config = visuals_players:new_section({name = "configuration"}) do
            end;
        end;
        --
        local visuals_world = visuals:new_section_holder({name = "world", size = 150, side = "right"}) do
            local world_general = visuals_world:new_section({name = "general"}) do
                world_general:new_toggle({name = "projectiles", flag = 'world_projectiles'}):new_colorpicker({flag = 'projectiles_color', default = Color3.fromRGB(255,0,0)});
            end;
            world_general:open();
            --
            local world_lighting = visuals_world:new_section({name = "environment"}) do
            end;
        end;
        --
        local visuals_effects = visuals:new_section_holder({name = "effects", size = 165, side = "right"}) do
            local effects_general = visuals_effects:new_section({name = "general"}) do
                effects_general:new_toggle({name = "weapon chams", flag = 'effects_weapon'}):new_colorpicker({flag = 'weapon_color', default = Color3.fromRGB(61, 100, 227)});
                effects_general:new_toggle({name = "arm chams", flag = 'effects_weapon'}):new_colorpicker({flag = 'arm_color', default = Color3.fromRGB(33, 64, 191)});
            end;
            effects_general:open();
            --
            local effects_removals = visuals_effects:new_section({name = "removals"}) do
            end;
        end;
    end;
    -- config
    do
        local cfg_list = config:new_section({name = "Profiles", size = "Fill"});
        local config_list = cfg_list:new_dropdown({name = "select profile:",list = true, size = "Fill", flag = 'selected_cfg', options = {}});
        local current_list = {}
        local function update_config_list()
            local list = {}
            for idx, file in ipairs(listfiles("zephyrus/configs")) do
                local file_name = file:gsub("zephyrus/configs\\", ""):gsub(".cfg", "")
                list[#list + 1] = file_name
            end
        
            local is_new = #list ~= #current_list
            if not is_new then
                for idx, file in ipairs(list) do
                    if file ~= current_list[idx] then
                        is_new = true
                        break
                    end
                end
            end
        
            if is_new then
                current_list = list
                config_list:refresh(list)
            end
        end
        --
        update_config_list()
        --
        local cfg_main = config:new_section({name = "Configurations", side = "right", size = "Fill"}) do
            local cfg_textbox = cfg_main:new_textbox({placeholder = "config name", middle = true, flag = 'cfg_name'})
            cfg_main:new_button({name = "create", callback = function()
                local config_name = library.flags.cfg_name
                if config_name == "" or isfile("zephyrus/configs/" .. config_name .. ".txt") then
                    return
                end
                writefile("zephyrus/configs/" .. config_name .. ".txt", "")
                update_config_list()
            end})
            cfg_main:new_button({name = "save", callback = function()
                if library.flags.selected_cfg ~= nil and isfile("zephyrus/configs/"..library.flags.selected_cfg) then
                    writefile("zephyrus/configs/"..library.flags.selected_cfg, window:get_config())
                end
            end})
            cfg_main:new_button({name = "load", callback = function()
                if library.flags.selected_cfg ~= nil and isfile("zephyrus/configs/"..library.flags.selected_cfg) then
                    library:load_config("zephyrus/configs/"..library.flags.selected_cfg)
                end
            end})
            cfg_main:new_button({name = "delete", callback = function()
                if library.flags.selected_cfg ~= nil and isfile("zephyrus/configs/"..library.flags.selected_cfg) then
                    delfile("zephyrus/configs/"..library.flags.selected_cfg)
                    update_config_list()
                end
            end})
        end;
    end;
    -- menu
    do
        local accent = menu:new_section({name = "theme", size = "Fill"})
        -- colorpickers (ape)
        local theme_pickers = {}
        theme_pickers["Accent"] = accent:new_colorpicker({name = "accent",flag = 'theme_accent', default = default_theme["Accent"], callback = function(state) library:ChangeThemeOption("Accent", state) end})
        theme_pickers["Window Outline Background"] = accent:new_colorpicker({name = "window outline",flag = 'theme_outline', default = default_theme["Window Outline Background"], callback = function(state) library:ChangeThemeOption("Window Outline Background", state) end})
        theme_pickers["Window Inline Background"] = accent:new_colorpicker({name = "window inline",flag = 'theme_inline', default = default_theme["Window Inline Background"], callback = function(state) library:ChangeThemeOption("Window Inline Background", state) end})
        theme_pickers["Window Holder Background"] = accent:new_colorpicker({name = "window holder",flag = 'theme_holder', default = default_theme["Window Holder Background"], callback = function(state) library:ChangeThemeOption("Window Holder Background", state) end})
        theme_pickers["Window Border"] = accent:new_colorpicker({name = "window border",flag = 'theme_border', default = default_theme["Window Border"], callback = function(state) library:ChangeThemeOption("Window Border", state) end})
        theme_pickers["Page Selected"] = accent:new_colorpicker({name = "page selected",flag = 'theme_selected', default = default_theme["Page Selected"], callback = function(state) library:ChangeThemeOption("Page Selected", state) end})
        theme_pickers["Page Unselected"] = accent:new_colorpicker({name = "page unselected",flag = 'theme_unselected', default = default_theme["Page Unselected"], callback = function(state) library:ChangeThemeOption("Page Unselected", state) end})
        theme_pickers["Section Inner Border"] = accent:new_colorpicker({name = "border 1",flag = 'theme_border1', default = default_theme["Section Inner Border"], callback = function(state) library:ChangeThemeOption("Section Inner Border", state) end})
        theme_pickers["Section Outer Border"] = accent:new_colorpicker({name = "border 2",flag = 'theme_border2', default = default_theme["Section Outer Border"], callback = function(state) library:ChangeThemeOption("Section Outer Border", state) end})
        theme_pickers["Section Background"] = accent:new_colorpicker({name = "section background",flag = 'theme_section', default = default_theme["Section Background"], callback = function(state) library:ChangeThemeOption("Section Background", state) end})
        theme_pickers["Text"] = accent:new_colorpicker({name = "text",flag = 'theme_text', default = default_theme["Text"], callback = function(state) library:ChangeThemeOption("Text", state) end})
        theme_pickers["Risky Text"] = accent:new_colorpicker({name = "risky text",flag = 'theme_risky', default = default_theme["Risky Text"], callback = function(state) library:ChangeThemeOption("Risky Text", state) end})
        theme_pickers["Object Background"] = accent:new_colorpicker({name = "element background",flag = 'theme_element', default = default_theme["Object Background"], callback = function(state) library:ChangeThemeOption("Object Background", state) end})
        accent:new_dropdown({flag = "settings/menu/effects", name = "accent effects", options = {"None", "rainbow", "shift", "reverse shift"}, default = "none"});
        accent:new_slider({flag = "settings/menu/effect_speed", name = "effect speed", min = 0.1, max = 2, default = 1, float = 0.1})
        game:GetService("RunService").Heartbeat:Connect(function()
            local AccentEffect = library.flags["settings/menu/effects"];
            local EffectSpeed = library.flags["settings/menu/effect_speed"];
            if AccentEffect == "rainbow" then
                local Clock = os.clock() * EffectSpeed
                local Color = Color3.fromHSV(math.abs(math.sin(Clock)), 1, 1);
                library:ChangeThemeOption("Accent", Color);
            end;
            if AccentEffect == "shift" then
                local ShiftOffset = 0
                local Clock = os.clock() * EffectSpeed + ShiftOffset;
                ShiftOffset = ShiftOffset + 0.01;
                local Color = Color3.fromHSV(math.abs(math.sin(Clock)), 1, 1)
                library.flags["theme_accent"] = Color;
                library:ChangeThemeOption("Accent", Color);
            end;
            if AccentEffect == "reverse shift" then
                local ShiftOffset = 0
                local Clock = os.clock() * EffectSpeed + ShiftOffset;
                ShiftOffset = ShiftOffset - 0.01;
                local Color = Color3.fromHSV(math.abs(math.sin(Clock)), 1, 1)
                library.flags["theme_accent"] = Color;
                library:ChangeThemeOption("Accent", Color);
            end;
        end);
        --
        local menu_other = menu:new_section({name = "other", size = "Fill", side = "right"})
        menu_other:new_keybind({name = "open / close", flag = 'menu_toggle', default = Enum.KeyCode.End, mode = "Toggle", ignore = true, callback = function() library:Close() end})
        menu_other:new_toggle({name = "show keybinds list", flag = 'keybind_list', callback = function(state) window:set_keybind_list_visibility(state) end})
        library:Close() -- shitty ui moment LOL
        menu_other:new_seperator({name = "theme"})
        local theme_tbl = {};
        for theme,v in next, ui_themes do
            table.insert(theme_tbl, theme)
        end
        menu_other:new_dropdown({name = "select theme:", flag = 'theme_list', options = theme_tbl})
        menu_other:new_button({name = "load theme", callback = function()
            library:SetTheme(ui_themes[library.flags.theme_list])
            -- stupid method below
            --theme_pickers["Accent"]:set(ui_themes[library.flags.theme_list]["Accent"])
            for option,picker in next, theme_pickers do
                picker:set(ui_themes[library.flags.theme_list][option])
            end;
        end})
        menu_other:new_seperator({name = "server"})
        menu_other:new_button({name = "rejoin", confirm = true, callback = function() game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId) end})
        menu_other:new_button({name = "copy join script", callback = function() setclipboard(([[game:GetService("TeleportService"):TeleportToPlaceInstance(%s, "%s")]]):format(game.PlaceId, game.JobId)) end})
        menu_other:new_button({name = "test", callback = function() library.notify("this is a test notif lol", 5) end})
    end;
